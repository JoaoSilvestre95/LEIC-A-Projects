package org.komparator.mediator.ws.cli;

import static javax.xml.ws.BindingProvider.ENDPOINT_ADDRESS_PROPERTY;

import java.net.ConnectException;
import java.net.SocketTimeoutException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.xml.ws.BindingProvider;
import javax.xml.ws.WebServiceException;

import org.komparator.mediator.ws.CartView;
import org.komparator.mediator.ws.EmptyCart_Exception;
import org.komparator.mediator.ws.InvalidCartId_Exception;
import org.komparator.mediator.ws.InvalidCreditCard_Exception;
import org.komparator.mediator.ws.InvalidItemId_Exception;
import org.komparator.mediator.ws.InvalidQuantity_Exception;
import org.komparator.mediator.ws.InvalidText_Exception;
import org.komparator.mediator.ws.ItemIdView;
import org.komparator.mediator.ws.ItemView;
import org.komparator.mediator.ws.MediatorPortType;
import org.komparator.mediator.ws.MediatorService;
import org.komparator.mediator.ws.NotEnoughItems_Exception;
import org.komparator.mediator.ws.ShoppingResultView;

// TODO uncomment after generate-sources
//import org.komparator.mediator.ws.*;

import pt.ulisboa.tecnico.sdis.ws.uddi.UDDINaming;


/**
 * Client.
 *
 * Adds easier endpoint address configuration and 
 * UDDI lookup capability to the PortType generated by wsimport.
 */
public class MediatorClient implements MediatorPortType {


     /** WS service */
     MediatorService service = null;


    /** WS port (port type is the interface, port is the implementation) */
     MediatorPortType port = null;
     
     Map<String, Object> requestContext = null;

    /** UDDI server URL */
    private String uddiURL = null;

    /** WS name */
    private String wsName = null;

    /** WS endpoint address */
    private String wsURL = null; // default value is defined inside WSDL

    public String getWsURL() {
        return wsURL;
    }
    
    public void setWsURL(String wsURL){
    	this.wsURL = wsURL;
    }

   
    private boolean verbose = false;

    public boolean isVerbose() {
        return verbose;
    }

    public void setVerbose(boolean verbose) {
        this.verbose = verbose;
    }

    /** constructor with provided web service URL */
    public MediatorClient(String wsURL) throws MediatorClientException {
        this.wsURL = wsURL;
        createStub();
    }

    /** constructor with provided UDDI location and name */
    public MediatorClient(String uddiURL, String wsName) throws MediatorClientException {
        this.uddiURL = uddiURL;
        this.wsName = wsName;
        uddiLookup();
        createStub();
        timeOutSetup();
    }

    /** UDDI lookup */
    private void uddiLookup() throws MediatorClientException {
        try {
            if (verbose)
                System.out.printf("Contacting UDDI at %s%n", uddiURL);
            UDDINaming uddiNaming = new UDDINaming(uddiURL);

            if (verbose)
                System.out.printf("Looking for '%s'%n", wsName);
            wsURL = uddiNaming.lookup(wsName);

        } catch (Exception e) {
            String msg = String.format("Client failed lookup on UDDI at %s!",
                    uddiURL);
            throw new MediatorClientException(msg, e);
        }

        if (wsURL == null) {
            String msg = String.format(
                    "Service with name %s not found on UDDI at %s", wsName,
                    uddiURL);
            throw new MediatorClientException(msg);
        }
    }

    /** Stub creation and configuration */
    private void createStub() {
        if (verbose)
            System.out.println("Creating stub ...");

         service = new MediatorService();
         port = service.getMediatorPort();

        if (wsURL != null) {
            if (verbose)
                System.out.println("Setting endpoint address ...");
            BindingProvider bindingProvider = (BindingProvider) port;
            requestContext = bindingProvider
                    .getRequestContext();
            requestContext.put(ENDPOINT_ADDRESS_PROPERTY, wsURL);               
        }
    }
    
    private void timeOutSetup(){
    	int receiveTimeout = 10000;
        // The receive timeout property has alternative names
        // Again, set them all to avoid compability issues
        final List<String> RECV_TIME_PROPS = new ArrayList<String>();
        RECV_TIME_PROPS.add("com.sun.xml.ws.request.timeout");
        RECV_TIME_PROPS.add("com.sun.xml.internal.ws.request.timeout");
        RECV_TIME_PROPS.add("javax.xml.ws.client.receiveTimeout");
        // Set timeout until the response is received (unit is milliseconds; 0 means infinite)
        for (String propName : RECV_TIME_PROPS)
            requestContext.put(propName, receiveTimeout);
        System.out.printf("Set receive timeout to %d milliseconds%n", receiveTimeout);
    }

    // remote invocation methods ----------------------------------------------
    
    
     @Override
	 public void clear() {
    	 try{
    		 port.clear();
    	 }catch(WebServiceException e){
			 Throwable cause = e.getCause();
			 if(cause != null && (cause instanceof SocketTimeoutException || cause instanceof ConnectException)){
				 try {
					uddiLookup();
				} catch (MediatorClientException e1) {
					this.clear();
				}
			     createStub();
				 this.clear();
			 }				 
			 else{
				 throw e;
			 }
	 	}	
	 }

     @Override
	 public String ping(String arg0) {
    	 try{
    		 return port.ping(arg0);
    	 }catch(WebServiceException e){
			 Throwable cause = e.getCause();
			 if(cause != null && (cause instanceof SocketTimeoutException || cause instanceof ConnectException)){
				 try {
					uddiLookup();
				} catch (MediatorClientException e1) {
					return this.ping(arg0);
				}
			     createStub();
				 return this.ping(arg0);
			 }				 
			 else{
				 throw e;
			 }
	 	}	
    	 
	 }

     @Override
	 public List<ItemView> searchItems(String descText) throws InvalidText_Exception {
		 try{
			 return port.searchItems(descText);
		 }catch(WebServiceException e){
			 Throwable cause = e.getCause();
			 if(cause != null && (cause instanceof SocketTimeoutException || cause instanceof ConnectException)){
				 try {
					uddiLookup();
				} catch (MediatorClientException e1) {
					return this.searchItems(descText);
				}
			     createStub();
				 return this.searchItems(descText);
			 }				 
			 else{
				 throw e;
			 }
	 	}	
	}

     @Override
	 public List<CartView> listCarts() {
    	 try{
    		 return port.listCarts();
    	 }catch(WebServiceException e){
			 Throwable cause = e.getCause();
			 if(cause != null && (cause instanceof SocketTimeoutException || cause instanceof ConnectException)){
				 try {
					uddiLookup();
				} catch (MediatorClientException e1) {
					return this.listCarts();
				}
			     createStub();
				 return this.listCarts();
			 }				 
			 else{
				 throw e;
			 }
	 	}	
	 }

	 @Override
	 public List<ItemView> getItems(String productId) throws InvalidItemId_Exception {
		try{	
		 	return port.getItems(productId);
	 	}catch(WebServiceException e){
			 Throwable cause = e.getCause();
			 if(cause != null && (cause instanceof SocketTimeoutException || cause instanceof ConnectException)){
				 try {
					uddiLookup();
				} catch (MediatorClientException e1) {
					return this.getItems(productId);
				}
			     createStub();
				 return this.getItems(productId);
			 }				 
			 else{
				 throw e;
			 }
	 	}		 
	 }
	 
	 public ShoppingResultView buyCart(String cartId, String creditCardNr)
			 throws EmptyCart_Exception, InvalidCartId_Exception, InvalidCreditCard_Exception {
		 Timestamp timestamp = new Timestamp(System.currentTimeMillis());
		 return this.buyCart(timestamp.toString(), cartId, creditCardNr);
	 }

	 public ShoppingResultView buyCart(String operationId, String cartId, String creditCardNr)
			 throws EmptyCart_Exception, InvalidCartId_Exception, InvalidCreditCard_Exception {
		 try{
			 return port.buyCart(operationId, cartId, creditCardNr);
		 }catch(WebServiceException e){
			 Throwable cause = e.getCause();
			 if(cause != null && (cause instanceof SocketTimeoutException || cause instanceof ConnectException)){
				 try {
					uddiLookup();
				} catch (MediatorClientException e1) {
					return this.buyCart(operationId, cartId, creditCardNr);
				}
			     createStub();
				 return this.buyCart(operationId, cartId, creditCardNr);
			 }				 
			 else{
				 throw e;
			 }
		 }		 
		 
	 } 
	
	 public void addToCart(String cartId, ItemIdView itemId, int itemQty) throws InvalidCartId_Exception, InvalidItemId_Exception, InvalidQuantity_Exception, NotEnoughItems_Exception  {
		 Timestamp timestamp = new Timestamp(System.currentTimeMillis());
		 this.addToCart(timestamp.toString(), cartId, itemId, itemQty);
	 }
	 
	 public void addToCart(String operationId, String cartId, ItemIdView itemId, int itemQty) throws InvalidCartId_Exception,
	 InvalidItemId_Exception, InvalidQuantity_Exception, NotEnoughItems_Exception{		 
		 try{
			 port.addToCart(operationId, cartId, itemId, itemQty);
		 }catch(WebServiceException e){
			 Throwable cause = e.getCause();
			 if(cause != null && (cause instanceof SocketTimeoutException || cause instanceof ConnectException)){
				 try {
					uddiLookup();
				} catch (MediatorClientException e1) {
					this.addToCart(operationId, cartId, itemId, itemQty);
				}
			     createStub();
				 this.addToCart(operationId, cartId, itemId, itemQty);
			 }				 
			 else{
				 throw e;
			 }
		 }		 
	 }

	 @Override
	 public List<ShoppingResultView> shopHistory() {
		 try{
			 return port.shopHistory();
		 }catch(WebServiceException e){
			 Throwable cause = e.getCause();
			 if(cause != null && (cause instanceof SocketTimeoutException || cause instanceof ConnectException)){
				 try {
					uddiLookup();
				} catch (MediatorClientException e1) {
					return this.shopHistory();
				}
			     createStub();
			     return this.shopHistory();
			 }				 
			 else{
				 throw e;
			 }
		 }		 
	 }
	 
	 @Override
	 public void imAlive(){
		 try{
			 port.imAlive();
		 }catch(WebServiceException e){
			 Throwable cause = e.getCause();
			 if(cause != null && (cause instanceof SocketTimeoutException || cause instanceof ConnectException)){
				 try {
					uddiLookup();
				} catch (MediatorClientException e1) {
					this.imAlive();
				}
			     createStub();
				 this.imAlive();
			 }				 
			 else{
				 throw e;
			 }
		 }			 
	 }
	 
	 @Override
	 public void updateShopHistory(String operationId, List<ShoppingResultView> shopHistory){
		 try{
			 port.updateShopHistory(operationId, shopHistory);
		 }catch(WebServiceException e){
			 Throwable cause = e.getCause();
			 if(cause != null && (cause instanceof SocketTimeoutException || cause instanceof ConnectException)){
				 try {
					uddiLookup();
				} catch (MediatorClientException e1) {
					this.updateShopHistory(operationId, shopHistory);
				}
			     createStub();
				 this.updateShopHistory(operationId, shopHistory);
			 }				 
			 else{
				 throw e;
			 }
		 }		 
		 
	 }
	 
	 @Override
	 public void updateCart(String operationId, List<CartView> cartList){
		 try{
			 port.updateCart(operationId, cartList);
		 }catch(WebServiceException e){
			 Throwable cause = e.getCause();
			 if(cause != null && (cause instanceof SocketTimeoutException || cause instanceof ConnectException)){
				 try {
					uddiLookup();
				} catch (MediatorClientException e1) {
					this.updateCart(operationId, cartList);
				}
			     createStub();
				 this.updateCart(operationId, cartList);
			 }				 
			 else{
				 throw e;
			 }
		 }		 
		 
	 }
	 
 
}